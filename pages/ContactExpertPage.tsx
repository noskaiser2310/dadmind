
import React, { useState, useEffect, useRef } from 'react';
import { Message, Expert } from '../types';
import { ChatMessage } from '../components/ChatMessage';
import { StyledButton } from '../components/StyledButton';
import { IconSend, IconPaperClip, IconChevronLeft, EXPERT_AVATAR_URL, USER_AVATAR_URL } from '../constants';
import { LoadingIcon } from '../components/LoadingIcon';

// Mock list of experts
const mockExperts: Expert[] = [
  {
    id: 'expert1',
    name: 'BS. Nguy·ªÖn VƒÉn Minh',
    specialty: 'T√¢m l√Ω Gia ƒë√¨nh & Tr·∫ª em',
    avatarUrl: EXPERT_AVATAR_URL, 
    online: true,
    bio: 'V·ªõi h∆°n 10 nƒÉm kinh nghi·ªám, t√¥i chuy√™n h·ªó tr·ª£ c√°c √¥ng b·ªë trong vi·ªác x√¢y d·ª±ng m·ªëi quan h·ªá t√≠ch c·ª±c v·ªõi con c√°i v√† gi·∫£i quy·∫øt xung ƒë·ªôt gia ƒë√¨nh.',
    phone: '0901 234 567',
    email: 'bs.minh@dadmind.com'
  },
  {
    id: 'expert2',
    name: 'ThS. Tr·∫ßn Th·ªã Lan Anh',
    specialty: 'Ph√°t tri·ªÉn K·ªπ nƒÉng L√†m cha',
    avatarUrl: "/assets/expert-avatar-2.webp", 
    online: true,
    bio: 'T√¥i t·∫≠p trung v√†o vi·ªác trang b·ªã cho c√°c √¥ng b·ªë nh·ªØng k·ªπ nƒÉng th·ª±c t·∫ø ƒë·ªÉ ƒë·ªëi m·∫∑t v·ªõi th√°ch th·ª©c trong t·ª´ng giai ƒëo·∫°n ph√°t tri·ªÉn c·ªßa con.',
    phone: '0902 345 678',
    email: 'ths.lananh@dadmind.com'
  },
  {
    id: 'expert3',
    name: 'CN. L√™ Ho√†ng ƒê·ª©c',
    specialty: 'C√¢n b·∫±ng C√¥ng vi·ªác & Cu·ªôc s·ªëng',
    avatarUrl: "/assets/expert-avatar-3.webp", 
    online: false,
    bio: 'Gi√∫p c√°c √¥ng b·ªë t√¨m th·∫•y s·ª± h√†i h√≤a gi·ªØa s·ª± nghi·ªáp v√† gia ƒë√¨nh l√† ƒëam m√™ c·ªßa t√¥i. H√£y c√πng nhau t√¨m gi·∫£i ph√°p nh√©.',
    phone: '0903 456 789',
    email: 'cn.duc@dadmind.com'
  },
];

const ExpertCard: React.FC<{ expert: Expert; onSelectExpert: (expert: Expert) => void }> = ({ expert, onSelectExpert }) => {
  return (
    <div className="bg-brand-bg-card p-5 rounded-xl shadow-card border border-brand-border/70 flex flex-col items-center text-center transform transition-all duration-200 hover:shadow-interactive-lg hover:scale-[1.02] hover:border-brand-primary/70">
      <img 
        src={expert.avatarUrl} 
        alt={expert.name} 
        className="w-24 h-24 rounded-full mb-4 shadow-lg border-3 border-white object-cover"
        onError={(e) => {
            const target = e.target as HTMLImageElement;
            target.src = `https://via.placeholder.com/96/E8F0F9/4A55A2?text=${expert.name.substring(0,1).toUpperCase()}`;
            target.alt = `${expert.name} placeholder avatar`;
        }}
      />
      <h3 className="text-lg font-semibold text-brand-dark-text mb-1.5">{expert.name}</h3>
      <span className="inline-block bg-brand-accent/20 text-brand-accent px-3 py-1 rounded-full text-xs font-semibold mb-3 tracking-wide uppercase shadow-sm">
        {expert.specialty}
      </span>
      <div className="flex items-center my-2">
        <span className={`w-3 h-3 rounded-full mr-2 ${expert.online ? 'bg-green-500 animate-pulse' : 'bg-gray-400'}`}></span>
        <p className={`text-xs font-semibold ${expert.online ? 'text-green-600' : 'text-gray-500'}`}>
          {expert.online ? 'ƒêang tr·ª±c tuy·∫øn' : 'Ngo·∫°i tuy·∫øn'}
        </p>
      </div>
      <p className="text-xs text-brand-light-text mb-4 h-16 overflow-hidden line-clamp-3">{expert.bio}</p>
      <StyledButton 
        onClick={() => onSelectExpert(expert)}
        disabled={!expert.online}
        size="sm"
        fullWidth
        className="mt-auto" 
      >
        {expert.online ? 'Chat ngay' : 'Hi·ªán kh√¥ng tr·ª±c tuy·∫øn'}
      </StyledButton>
    </div>
  );
};


export const ContactExpertPage: React.FC = () => {
  const [selectedExpert, setSelectedExpert] = useState<Expert | null>(null);
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState('');
  const [isExpertReplying, setIsExpertReplying] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const fileInputRef = useRef<HTMLInputElement>(null);
  
  const onlineExperts = mockExperts.filter(e => e.online);
  const offlineExperts = mockExperts.filter(e => !e.online);


  useEffect(() => {
    if (selectedExpert) {
      setMessages([
        {
          id: 'expert-intro',
          text: `Xin ch√†o b·∫°n, t√¥i l√† ${selectedExpert.name}. R·∫•t vui ƒë∆∞·ª£c l·∫Øng nghe v√† h·ªó tr·ª£ b·∫°n. B·∫°n c√≥ th·ªÉ b·∫Øt ƒë·∫ßu chia s·∫ª v·∫•n ƒë·ªÅ ho·∫∑c c√¢u h·ªèi c·ªßa m√¨nh.`,
          sender: 'expert',
          timestamp: Date.now(),
          avatar: selectedExpert.avatarUrl,
        }
      ]);
    } else {
      setMessages([]); 
    }
  }, [selectedExpert]);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  const handleSelectExpert = (expert: Expert) => {
    setSelectedExpert(expert);
  };

  const handleBackToExpertList = () => {
    setSelectedExpert(null);
  };

  const handleSend = () => {
    if (!input.trim() || !selectedExpert) return;
    const userMessage: Message = {
      id: Date.now().toString(),
      text: input,
      sender: 'user',
      timestamp: Date.now(),
      avatar: USER_AVATAR_URL,
    };
    setMessages(prev => [...prev, userMessage]);
    setInput('');
    setIsExpertReplying(true);

    setTimeout(() => {
      const expertReply: Message = {
        id: (Date.now() + 1).toString(),
        text: "C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª. T√¥i ƒëang xem x√©t th√¥ng tin b·∫°n cung c·∫•p v√† s·∫Ω ph·∫£n h·ªìi s·ªõm nh·∫•t c√≥ th·ªÉ. B·∫°n c√≥ mu·ªën b·ªï sung th√™m ƒëi·ªÅu g√¨ kh√¥ng?",
        sender: 'expert',
        timestamp: Date.now(),
        avatar: selectedExpert.avatarUrl,
      };
      setMessages(prev => [...prev, expertReply]);
      setIsExpertReplying(false);
    }, 2000 + Math.random() * 1500);
  };
  
  const handleFileUploadClick = () => {
    fileInputRef.current?.click();
  };

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      console.log("File selected for expert chat:", file.name);
      const fileMessage: Message = {
        id: Date.now().toString(),
        text: `üìé ƒê√£ ƒë√≠nh k√®m: ${file.name} (T√≠nh nƒÉng t·∫£i file ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn)`,
        sender: 'user',
        timestamp: Date.now(),
      };
      setMessages(prev => [...prev, fileMessage]);
    }
  };

  if (!selectedExpert) {
    return (
      <div className="max-w-5xl mx-auto py-8 px-4">
        <h1 className="text-3xl sm:text-4xl font-extrabold text-brand-dark-text text-center mb-4">K·∫øt n·ªëi v·ªõi Chuy√™n Gia</h1>
        <p className="text-center text-brand-light-text mb-10">Ch·ªçn m·ªôt chuy√™n gia ƒëang tr·ª±c tuy·∫øn ƒë·ªÉ b·∫Øt ƒë·∫ßu cu·ªôc tr√≤ chuy·ªán c·ªßa b·∫°n.</p>
        
        {onlineExperts.length > 0 && (
          <>
            <div className="text-center mb-2">
                <h2 className="text-2xl font-bold text-green-600 inline-block">ƒêang tr·ª±c tuy·∫øn</h2>
            </div>
            <div className="w-24 h-0.5 bg-green-500/50 mx-auto mb-8"></div>
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 mb-12">
              {onlineExperts.map(expert => (
                <ExpertCard key={expert.id} expert={expert} onSelectExpert={handleSelectExpert} />
              ))}
            </div>
          </>
        )}

        {offlineExperts.length > 0 && (
           <>
             <div className="text-center mb-2">
                <h2 className="text-2xl font-bold text-gray-500 inline-block">Hi·ªán kh√¥ng tr·ª±c tuy·∫øn</h2>
             </div>
             <div className="w-24 h-0.5 bg-gray-500/50 mx-auto mb-8"></div>
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 opacity-70">
              {offlineExperts.map(expert => (
                <ExpertCard key={expert.id} expert={expert} onSelectExpert={handleSelectExpert} />
              ))}
            </div>
           </>
        )}
         {onlineExperts.length === 0 && offlineExperts.length === 0 && (
            <p className="text-center text-brand-light-text py-10">Hi·ªán t·∫°i kh√¥ng c√≥ chuy√™n gia n√†o. Vui l√≤ng quay l·∫°i sau.</p>
        )}
      </div>
    );
  }

  // Chat View
  return (
    <div className="flex flex-col lg:flex-row gap-6 max-w-6xl mx-auto bg-brand-bg-card p-4 sm:p-6 rounded-xl shadow-card min-h-[calc(100vh-15rem)]">
      {/* Chat Area */}
      <div className="flex-grow flex flex-col h-[calc(100vh-18rem)] sm:h-[calc(100vh-17rem)] lg:min-h-[calc(100vh-20rem)] lg:max-h-[calc(100vh-20rem)]">
        <div className="flex items-center justify-between mb-4 border-b border-brand-border pb-3">
            <StyledButton 
                variant="subtle" 
                size="sm" 
                onClick={handleBackToExpertList}
                leftIcon={<IconChevronLeft className="w-5 h-5"/>}
                className="!px-3 !py-1.5"
                aria-label="Quay l·∫°i danh s√°ch chuy√™n gia"
            >
                Ch·ªçn chuy√™n gia kh√°c
            </StyledButton>
            <h2 className="text-xl sm:text-2xl font-bold text-brand-dark-text text-right">
              Chat v·ªõi: <span className="text-brand-primary">{selectedExpert.name}</span>
            </h2>
        </div>
        <div className="flex-grow overflow-y-auto p-1 sm:p-4 space-y-1 bg-brand-bg-subtle/60 rounded-lg mb-4 custom-scrollbar">
          {messages.map((msg) => (
            <ChatMessage key={msg.id} message={msg} />
          ))}
          {isExpertReplying && (
            <div className="flex items-end space-x-3 my-3">
              <img 
                src={selectedExpert.avatarUrl} 
                alt={`${selectedExpert.name} avatar loading`}
                className="w-9 h-9 rounded-full object-cover border-2 border-white shadow-sm"
                onError={(e) => {
                    const target = e.target as HTMLImageElement;
                    target.src = `https://via.placeholder.com/36/E8F0F9/4A55A2?text=${selectedExpert.name.substring(0,1).toUpperCase()}`;
                    target.alt = `${selectedExpert.name} placeholder avatar`;
                }}
              />
              <div className="max-w-xs lg:max-w-md px-4 py-3 rounded-2xl shadow-md bg-brand-bg-card text-brand-dark-text rounded-bl-lg border border-brand-border">
                <LoadingIcon size="sm" color="text-brand-primary" />
              </div>
            </div>
          )}
          <div ref={messagesEndRef} />
        </div>
        <div className="mt-auto flex items-center gap-2 p-2.5 border-t border-brand-border bg-brand-bg-card/70 rounded-b-lg">
          <input 
            type="file" 
            ref={fileInputRef} 
            onChange={handleFileChange} 
            className="hidden" 
            accept="image/*,application/pdf,.doc,.docx"
          />
          <button 
            onClick={handleFileUploadClick}
            className="p-2.5 text-brand-light-text hover:text-brand-primary rounded-full hover:bg-brand-primary/10 transition-colors disabled:opacity-50"
            aria-label="Attach file"
            title="ƒê√≠nh k√®m t·ªáp (T√≠nh nƒÉng ƒëang ph√°t tri·ªÉn)"
            disabled={isExpertReplying}
          >
            <IconPaperClip className="w-5 h-5" />
          </button>
          <input
            type="text"
            value={input}
            onChange={(e) => setInput(e.target.value)}
            onKeyPress={(e) => e.key === 'Enter' && !isExpertReplying && handleSend()}
            placeholder={`Nh·∫≠p tin nh·∫Øn cho ${selectedExpert.name}...`}
            className="flex-grow p-3 border border-brand-border rounded-lg focus:ring-2 focus:ring-brand-primary focus:border-transparent outline-none text-sm placeholder-gray-500 disabled:bg-gray-100"
            disabled={isExpertReplying}
            aria-label={`Message to ${selectedExpert.name}`}
          />
          <StyledButton 
            onClick={handleSend} 
            className="!p-3 !rounded-lg" 
            disabled={!input.trim() || isExpertReplying}
            aria-label={`Send message to ${selectedExpert.name}`}
          >
            <IconSend className="w-5 h-5" />
          </StyledButton>
        </div>
      </div>

      {/* Sidebar with Selected Expert Info */}
      <div className="lg:w-2/5 xl:w-1/3 p-4 sm:p-5 bg-brand-bg-light rounded-lg flex flex-col shadow-sm border border-brand-border/50">
        <div className="text-center mb-6 pb-6 border-b border-brand-border/70">
          <img 
            src={selectedExpert.avatarUrl} 
            alt={selectedExpert.name} 
            className="w-28 h-28 mx-auto rounded-full mb-4 shadow-xl border-4 border-white object-cover"
            onError={(e) => {
                const target = e.target as HTMLImageElement;
                target.src = `https://via.placeholder.com/112/E8F0F9/4A55A2?text=${selectedExpert.name.substring(0,1).toUpperCase()}`;
                target.alt = `${selectedExpert.name} placeholder avatar`;
            }}
          />
          <h3 className="text-xl font-semibold text-brand-dark-text">{selectedExpert.name}</h3>
          <span className="inline-block bg-brand-accent/20 text-brand-accent px-3 py-1 rounded-full text-xs font-semibold mt-1.5 tracking-wide uppercase shadow-sm">
            {selectedExpert.specialty}
         </span>
        </div>
        
        <div className="space-y-3 mb-6">
            {selectedExpert.phone && (
                 <div className="p-3.5 bg-brand-bg-card rounded-lg shadow-sm border border-brand-border/70">
                    <p className="text-xs text-gray-500 uppercase tracking-wider font-semibold">S·ªë ƒëi·ªán tho·∫°i</p>
                    <p className="text-sm text-brand-dark-text font-medium">{selectedExpert.phone}</p>
                </div>
            )}
            {selectedExpert.email && (
                <div className="p-3.5 bg-brand-bg-card rounded-lg shadow-sm border border-brand-border/70">
                    <p className="text-xs text-gray-500 uppercase tracking-wider font-semibold">Email</p>
                    <p className="text-sm text-brand-dark-text font-medium">{selectedExpert.email}</p>
                </div>
            )}
            {selectedExpert.bio && (
                 <div className="p-3.5 bg-brand-bg-card rounded-lg shadow-sm border border-brand-border/70">
                    <p className="text-xs text-gray-500 uppercase tracking-wider font-semibold">Gi·ªõi thi·ªáu</p>
                    <p className="text-sm text-brand-light-text">{selectedExpert.bio}</p>
                </div>
            )}
             <p className="text-xs text-center text-gray-400 mt-2">Th√¥ng tin li√™n h·ªá ƒë∆∞·ª£c cung c·∫•p ƒë·ªÉ tham kh·∫£o. Cu·ªôc tr√≤ chuy·ªán ch√≠nh di·ªÖn ra t·∫°i ƒë√¢y.</p>
        </div>
        
        <div className="mt-auto pt-6 border-t border-brand-border/70">
            <p className="text-xs text-brand-light-text text-center">
                M·ªçi th√¥ng tin trao ƒë·ªïi v·ªõi chuy√™n gia ƒë·ªÅu ƒë∆∞·ª£c b·∫£o m·∫≠t.
            </p>
        </div>
      </div>
    </div>
  );
};
    